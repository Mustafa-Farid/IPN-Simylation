

CREATE COMPUTE MODULE postRegister_Compute3
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		 CALL CopyMessageHeaders();
--		 CALL CopyEntireMessage();
		DECLARE group1 REFERENCE TO InputRoot.ComIbmGroupCompleteNode.Group.Replies.validate[1];
		DECLARE group2 REFERENCE TO InputRoot.ComIbmGroupCompleteNode.Group.Replies.validate[2];
		DECLARE group3 REFERENCE TO InputRoot.ComIbmGroupCompleteNode.Group.Replies.validate[3];
		
--		SET OutputRoot.JSON.Data.response.isCardExist = group1.Reply.Root.JSON.Data.res.found;
--		SET OutputRoot.JSON.Data.response.isAtmPinValid = group2.Reply.Root.JSON.Data.res.found;
--		SET OutputRoot.JSON.Data.response."card-number" = Environment.Variables."card-number";
--		SET OutputRoot.JSON.Data.response."ipn-pin" = Environment.Variables."ipn-pin";
		
		DECLARE "card-number" CHARACTER group1.Reply.Root.HTTPResponseHeader."Card-Number";
		DECLARE "ipa-pin" CHARACTER group1.Reply.Root.HTTPResponseHeader."Ipa-Pin";
		DECLARE "account-key" CHARACTER group1.Reply.Root.HTTPResponseHeader."Account-Key";
		DECLARE isAccountRegistered BOOLEAN group3.Reply.Root.JSON.Data.res."success";
		DECLARE isCardExist BOOLEAN group2.Reply.Root.JSON.Data.res."success";
		DECLARE isAtmPinValid BOOLEAN group1.Reply.Root.JSON.Data.res."success";
		
		SET OutputRoot.JSON.Data.response."accountKey" = "account-key";
		
		IF isCardExist = true and isAtmPinValid = true and isAccountRegistered = true THEN
			
			UPDATE Database.accounts AS Bank
			SET ipaPin = "ipa-pin"
			WHERE Bank.cardNum = "card-number";
			
			UPDATE Database.accounts AS Bank
			SET accountKey = "account-key"
			WHERE Bank.cardNum = "card-number";
			
			SET OutputRoot.JSON.Data.response."is-register" = true;
			
		ELSE
			
			SET OutputRoot.JSON.Data.response."is-register" = false;
			
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
